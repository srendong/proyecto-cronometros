{"version":3,"sources":["components/Cronometro/Cronometro.jsx","components/Creator/Creator.jsx","App.js","serviceWorker.js","index.js"],"names":["Cronometro","state","editComponent","running","time","seconds","_this","slice","minutes","Math","floor","hours","handlerStart","oldRunning","setState","s","setInterval","clearInterval","handlerReset","handlerEdit","handlerSave","e","preventDefault","editView","this","normalView","react_default","a","createElement","className","onSubmit","props","name","concat","type","value","onChange","handlerChangeName","project","handlerChangeProject","onClick","clickDelete","Component","Creator","nameInput","focus","submitCreator","htmlFor","id","placeholder","change","ref","input","velue","cancelCreator","App","chronometers","Date","valueOf","creatorVisibility","handlerShowCreator","oldState","handlerCreate","Object","defineProperty","target","handlerAdd","toConsumableArray","length","alert","unshift","handlerDelete","chronometerIndex","findIndex","chronometer","splice","objectSpread","_this2","components_Creator_Creator","map","index","components_Cronometro_Cronometro","key","clickCancel","handlerCancel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3eb5ce7d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Cronometro extends Component {\nstate = {\n      editComponent: false,\n    running: false,\n    time: 0\n    }\n\n  seconds = () => {\n    return (\"0\" + (this.state.time % 60)).slice(-2);\n  };\n\n  minutes = () => {\n    return (\"0\" + Math.floor(this.state.time / 60)%60).slice(-2);\n  };\n\n  hours = () => {\n    return (\"0\" + Math.floor(this.state.time / 3600)).slice(-2);\n  };\n\n  handlerStart = () => {\n    const oldRunning = this.state.running;\n    this.setState({\n      running: !oldRunning\n    });\n    const s = setInterval(() => {\n      this.state.running  ? this.setState({time: this.state.time + 1}):clearInterval(s)\n    }, 1000);    \n  };\n  handlerReset = () =>{\n    this.setState({time: 0})\n  }\n\n  handlerEdit = () => {\n    this.setState({ editComponent: true });\n  };\n\n  handlerSave = e => {\n    e.preventDefault();\n    this.setState({ editComponent: false });\n  };\n\n  render() {\n    const editView = this.state.editComponent ? \"\" : \"invisible\";\n    const normalView = this.state.editComponent ? \"invisible\" : \"\";\n    return (\n      <div className=\"cronometro\">\n        <form className=\"textos \" onSubmit={this.handlerSave}>\n          <h5>{this.props.name}</h5>\n          <input\n            className={`input1 ${editView}`}\n            type=\"text\"\n            name=\"name\"\n            value={this.props.name}\n            onChange={this.props.handlerChangeName}\n          />\n          <p>{this.props.project}</p>\n          <input\n            className={`input1 ${editView}`}\n            type=\"text\"\n            name=\"project\"\n            value={this.props.project}\n            onChange={this.props.handlerChangeProject}\n          />\n        </form>\n        <div className=\"time \">\n          <p>{this.hours()}:{this.minutes()}:{this.seconds()}</p>\n        </div>\n        <div className=\"botones \">\n          <button className={this.state.running ? \"startStop red\":\"startStop green\"} onClick={this.handlerStart}>\n            {this.state.running ? \"stop\" : \"start\"}\n          </button>\n          <button className=\"boton\" onClick={this.handlerReset}>\n            Reset\n          </button>\n          <button className={`boton ${normalView}`} onClick={this.handlerEdit}>\n            Edit\n          </button>\n          <button className={`boton ${normalView}`} onClick={this.props.clickDelete}>\n            Delete\n          </button>\n          <button className={`botons ${editView}`} onClick={this.handlerSave}>\n            save\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Cronometro;\n","import React, { Component } from \"react\";\n\nclass Creator extends Component {\n  componentDidMount(){\n    this.nameInput.focus();\n  }\n  render() {\n    return (\n      <div className=\"creator\">\n        <form className=\"form\" onSubmit={this.props.submitCreator}>\n          <div className=\"name\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              className=\"entrada\"\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"Name\"\n              value={this.props.name}\n              onChange={this.props.change}\n              ref={(input) => { this.nameInput = input; }}\n            />\n          </div>\n          <div className=\"name\">\n            <label htmlFor=\"project\">Project</label>\n            <input\n              className=\"entrada\"\n              type=\"text\"\n              id=\"project\"\n              name=\"project\"\n              placeholder=\"Project\"\n              velue={this.props.project}\n              onChange={this.props.change}\n            />\n          </div>\n          <div className=\"botones\">\n            <button className=\"boton\" onClick={this.props.submitCreator}>\n              create\n            </button>\n            <button className=\"boton\" onClick={this.props.cancelCreator}>\n              cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Creator;\n\n// const Creator = ({ submitCreator, name, project , cancelCreator, change}) => {\n\n//   return (\n//     <div className=\"creator\">\n//       <form  className=\"form\" onSubmit={submitCreator}>\n//         <div className=\"name\">\n//           <label htmlFor=\"name\">Name</label>\n//           <input className=\"entrada\" type=\"text\" id=\"name\" name=\"name\"  placeholder=\"   Name\" value={name} onChange={change} />\n//         </div>\n//         <div className=\"name\">\n//         <label htmlFor=\"project\">Project</label>\n//         <input className=\"entrada\" type=\"text\" id=\"project\" name=\"project\" placeholder=\"   Project\" velue={project} onChange={change} />\n//         </div>\n//         <div className=\"botones\">\n//           <button className=\"boton\" onClick={submitCreator}>create</button>\n//           <button className=\"boton\" onClick={cancelCreator}>cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Creator;\n","import React, { Component } from \"react\";\nimport \"./scss/App.scss\";\nimport Cronometro from \"./components/Cronometro/Cronometro\";\nimport Creator from \"./components/Creator/Creator\";\n\nclass App extends Component {\n  state = {\n    chronometers: [\n      {\n        id: new Date().valueOf(),\n        name: \"Example\",\n        project: \"Project\"\n      }\n    ],\n    creatorVisibility: true,\n    name: \"\",\n    project: \"\"\n  };\n\n  handlerShowCreator = e => {\n    e.preventDefault();\n    const oldState = this.state.creatorVisibility;\n    this.setState({ creatorVisibility: !oldState });\n    this.setState({ name: \"\", project: \"\" });\n  };\n\n  handlerCreate = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handlerAdd = e => {\n    e.preventDefault();\n    const chronometers = [...this.state.chronometers];\n    this.state.name.length === 0 || this.state.project.length === 0\n      ? alert(\"fill the inputs\")\n      : chronometers.unshift({\n          id: new Date().valueOf(),\n          name: this.state.name,\n          project: this.state.project,\n          time: 0\n        });\n    this.setState({ chronometers });\n    this.setState({ name: \"\", project: \"\", creatorVisibility: true });\n  };\n\n  handlerDelete = id => {\n    const chronometerIndex = this.state.chronometers.findIndex(\n      chronometer => id === chronometer.id\n    );\n    const chronometers = [...this.state.chronometers];\n    chronometers.splice(chronometerIndex, 1);\n    this.setState({ chronometers });\n  };\n\n  handlerChangeName = (e, id) => {\n    const chronometerIndex = this.state.chronometers.findIndex(\n      chronometer => id === chronometer.id\n    );\n    const chronometer = { ...this.state.chronometers[chronometerIndex] };\n    chronometer.name = e.target.value;\n    const chronometers = [...this.state.chronometers];\n    chronometers[chronometerIndex] = chronometer;\n    this.setState({ chronometers });\n  };\n\n  handlerChangeProject = (e, id) => {\n    const chronometerIndex = this.state.chronometers.findIndex(\n      chronometer => id === chronometer.id\n    );\n    const chronometer = { ...this.state.chronometers[chronometerIndex] };\n    chronometer.project = e.target.value;\n    const chronometers = [...this.state.chronometers];\n    chronometers[chronometerIndex] = chronometer;\n    this.setState({ chronometers });\n  };\n\n  render() {\n    return (\n      <div className=\"contenido\">\n        <div className=\"editor fixed-top border \">\n          <div className=\"titulo \">\n            <h1>Timers</h1>\n          </div>\n          <div className=\"creador \">\n            <button\n              className=\"chronometerCreator\"\n              onClick={this.handlerShowCreator}\n            >\n              {this.state.creatorVisibility ? \"create\" : \"cancel\"}\n            </button>\n          </div>\n        </div>\n        <div className=\"cronometros \">\n          {this.state.creatorVisibility ? null : (\n            <Creator\n              name={this.state.name}\n              project={this.state.project}\n              change={this.handlerCreate}\n              submitCreator={this.handlerAdd}\n              cancelCreator={this.handlerShowCreator}\n            />\n          )}\n          {this.state.chronometers.map((chronometer, index) => (\n            <Cronometro\n              key={chronometer.id}\n              name={chronometer.name}\n              project={chronometer.project}\n              clickDelete={() => this.handlerDelete(chronometer.id)}\n              handlerChangeName={e => this.handlerChangeName(e, chronometer.id)}\n              handlerChangeProject={e =>\n                this.handlerChangeProject(e, chronometer.id)\n              }\n              clickCancel={this.handlerCancel}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}